/*
 * This is main file to join c++ project and main.c file generated by CubeMX
 */

#include "main.h"
#include "start.h"
#include "ws2811b_cpp.h"
#include "max7219_cpp.h"
#include "tools.h"
#include "animation.h"
#include "clean.h"
#include "manager.h"
#include "button.h"

// These variables are defined in main.c
extern	ADC_HandleTypeDef hadc1;
extern	TIM_HandleTypeDef htim2;
extern	DMA_HandleTypeDef hdma_tim2_ch1;
extern	SPI_HandleTypeDef hspi1;
//-----------------------------------------

// Animations
colorWipe   cWipe;
colorWalk   cWalk;
randomCreep cCreep;
rainbow     cRainbow;
rainCycle   cRainCycle;
rainFull    cRainFull;
colorWave   cWave;
lightUp     lUp;
sparks      sRnd;
rndFade     rFade;
centerRun   cRun;
shineSeven  cSeven;
walkSeven   wSeven;
flashSeven  fSeven;
shineFlash  cFlash;
mergeOne    mOne;
mergeWave   mWave;
collideOne  cOne;
neoFire     cFire;
evenOdd     cEvenOdd;
collMdl     cCollMdl;
collEnd     cCollEnd;
rainBlend   cBlend;
swing       cSwing;
swingSingle cSwingS;
randomFill  rFill;
singleWave  sWave;
worms       cWorms;
interfer    cInterf;
toward      cToward;
towardRain  rToward;
lghtHouse   lHouse;
rndDrops    cDrops;
solCreep    sCreep;
theatChase	tChase;
meteorSky	mtrSky;
symmRun		symRun;
metSingle	mtrSgl;
pureStrip	pStrip;
sideFill	sFill;
browMotion	cBrowian;
rainDrops	cRainDrp;
ripeFruit	cRipe;
brightWave	bWave;
brColCreep	bcCreep;
dropFade	cFadeDrp;

// Clear animations
clearSide   clrSide;
clearCntr   clrCntr;
clearFade   clrFade;
eatCntr     clrEat;
clearHalf   clrHalf;

animation*  anims[] = {
              &cWipe,	 &cWalk,	&cCreep,	&cRainbow,	&cRainCycle,	&cRainFull,	&cWave,		&lUp,		&sRnd,		&rFade,
              &cCollEnd, &cRun, 	&cSeven,	&mOne,		&mWave,			&cOne,		&cFire,		&cEvenOdd,	&rFill,		&cCollMdl,
              &cBlend,	 &cSwing,	&cSwingS,	&cFlash,	&sWave,			&cWorms,	&cInterf,	&cToward,	&rToward,	&lHouse,
              &cDrops,	 &wSeven, 	&fSeven, 	&sCreep,	&tChase,		&mtrSky,	&symRun,	&mtrSgl,	&pStrip,	&sFill,
			  &cBrowian, &cRainDrp, &cRipe,		&bWave,		&bcCreep,		&cFadeDrp
            };
clr*        clearance[] = { &clrSide, &clrCntr, &clrFade, &clrEat, &clrHalf };

const uint8_t  num_anim = sizeof(anims) / sizeof(animation*);
const uint8_t  num_clr  = sizeof(clearance) / sizeof(clr*);


const uint16_t	strip_length = 100;
NEOPIXEL		strip;												// Global variable used in many files
BUTTON			bMenu(BTN_MENU_GPIO_Port, BTN_MENU_Pin);
BUTTON			bIncr(BTN_PLUS_GPIO_Port, BTN_PLUS_Pin);
MAX7219			disp(&hspi1, SPI1_SS_GPIO_Port, SPI1_SS_Pin);
MANAGER     	mgr(&disp, anims, num_anim, clearance, num_clr);

extern "C" void DMA1_Channel5_IRQHandler(void) {
	strip.DMA_CallBack();
}

extern "C" void EXTI1_IRQHandler(void) {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET) {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
		bMenu.bINTR();
	}
}

extern "C" void EXTI3_IRQHandler(void) {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET) {
	    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
	    bIncr.bINTR();
	}
}

void setup(void) {
	uint32_t light 	= analogRead(&hadc1, ADC_CHANNEL_3);			// The ambient light
	srand(light);													// Initialize random generator with the ambient light value
	strip.init(strip_length, &htim2, TIM_CHANNEL_1, &hdma_tim2_ch1, NEO_RGB);
	strip.show();
	disp.init();
	mgr.init();
	HAL_Delay(500);
}

void loop(void) {
	  mgr.show();
	  uint8_t bStatus = bMenu.intButtonStatus();
	  if (bStatus == 1)
		  mgr.menu();
	  else if (bStatus == 2)
		  mgr.menu_l();
	  bStatus = bIncr.intButtonStatus();
	  if (bStatus) mgr.incr();

}
